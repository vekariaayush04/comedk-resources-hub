colt.save().then(a=>console.log(a))
const colt=new Person({first:"Colt", last:"Steele"})
                                        const Person=mongoose.model("Person", personSchema);
                                        })
                                        console.log("Just Saved!!!")
                                    personSchema.post('save',async function(){
                                    })
                                    console.log("About to Save!!")
                                this.last="Mama";
                            this.first="YO";
                        personSchema.pre('save',async function(){
                        })
                        return `${this.first} ${this.last}`
                    personSchema.virtual("fullName").get(function(){
                    })
                    last:String
                first:String,
            const personSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/shopApp')
const mongoose=require("mongoose");
.load person.js
man.save()
const man=new Person({first:"Mann", last:"Jain"})
                                const Person=mongoose.model("Person", personSchema);
                                })
                                console.log("Just Saved!!!")
                            personSchema.post('save',async function(){
                            })
                            console.log("About to Save!!")
                        personSchema.pre('save',async function(){
                        })
                        return `${this.first} ${this.last}`
                    personSchema.virtual("fullName").get(function(){
                    })
                    last:String
                first:String,
            const personSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/shopApp')
const mongoose=require("mongoose");
.load person.js
jay.fullName
 const jay=new Person({first:"Jammy",last:"Singh"})
jiy.fullName
                        const Person=mongoose.model("Person", personSchema);
                        })
                        return `${this.first} ${this.last}`
                    personSchema.virtual("fullName").get(function(){
                    })
                    last:String
                first:String,
            const personSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/shopApp')
const mongoose=require("mongoose");
.load person.js
jiy.fullName
jiy.save()
jiy
 const jiy=new Person({first:"Tammy",last:"Singh"})
                        const Person=mongoose.model("Person", personSchema);
                        })
                        `return ${this.first} ${this.last}`
                    personSchema.virtual("fullName").get(function(){
                    })
                    last:String
                first:String,
            const personSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/shopApp')
const mongoose=require("mongoose");
.load person.js
 const tammy=new Person({first:"Tammy",last:"Singh"})
Tamm
Tammy
 const Tamm=new Person({first:"Tammy",last:"Singh"})
 const Tammy=new Person({first:"Tammy",last:"Singh"})
const Tammy=new Person({first:"Tammy",last:"Singh"})
                        })
                        `return ${this.first} ${this.last}`
                    personSchema.virtual("fullName").get(function(){
                    })
                    last:String
                first:String,
            const personSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/shopApp')
const mongoose=require("mongoose");
.load person.js
db.products.find()
p.greet()
p
const p=new Product({name:"bike bag",price:10})
                                                                                                                                                                                                                                                    //     //console.log(err.errors.name.properties.message)
                                                                                                                                                                                                                                                    //     console.log(err)
                                                                                                                                                                                                                                                    //     console.log("Oh No error!")
                                                                                                                                                                                                                                                    // }).catch(err=>{
                                                                                                                                                                                                                                                    //     console.log(data)
                                                                                                                                                                                                                                                    //     console.log("It Worked!")
                                                                                                                                                                                                                                                    // .then(data=>{
                                                                                                                                                                                                                                                    // Product.findOneAndUpdate({name:"Tire Pump"}, {price:19.99},{new:true, runValidators:true})//it will not let price to be less than zero which we set min as 0
                                                                                                                                                                                                                                                    //Product.findOneAndUpdate({name:"Tire Pump"}, {price:-19.99},{new:true})//here price will change to -19.99 even after we gave above that min is 0
                                                                                                                                                                                                                                                    })
                                                                                                                                                                                                                                                    //console.log(err.errors.name.properties.message)
                                                                                                                                                                                                                                                console.log(err)
                                                                                                                                                                                                                                            console.log("Oh No error!")
                                                                                                                                                                                                                                        }).catch(err=>{
                                                                                                                                                                                                                                        console.log(data)
                                                                                                                                                                                                                                    console.log("It Worked!")
                                                                                                                                                                                                                                .then(data=>{
                                                                                                                                                                                                                                bike.save()//here we saved so much data in shopapp database but we removed their code and for one i commented this data
                                                                                                                                                                                                                                const bike=new Product({name:"Jersey", price:70,size:"S", categories:["Cycling"]})//it will automatically convert 122 to string
                                                                                                                                                                                                                                const Product=mongoose.model("Product",productSchema);
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                console.log("Hello Howdy Hiiii!!")
                                                                                                                                                                                                                            productSchema.methods.greet=function(){
                                                                                                                                                                                                                            })
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        enum:["S","M","L"]//enum will check if size is in from array only
                                                                                                                                                                                                                type:String,
                                                                                                                                                                                                        size:{
                                                                                                                                                                                                    },
                                                                                                                                                                                                }
                                                                                                                                                                                        default:0
                                                                                                                                                                            type:Number,
                                                                                                                                                                inStore:{
                                                                                                                                                        },
                                                                                                                                                default:0
                                                                                                                                    type:Number,
                                                                                                                        online:{
                                                                                                                qty:{
                                                                                                            },
                                                                                                        type:[String]
                                                                                                categories:{
                                                                                            },
                                                                                        default:false
                                                                                type:Boolean,
                                                                        onSale:{
                                                                    },
                                                                min:[0,"Price must be positive dude"]
                                                        type:Number,
                                                price:{
                                            },
                                        maxlength:20
                                required:true,
                        type:String,
                name:{
            const productSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/shopApp')
const mongoose=require("mongoose");
.load projects.js
 Movie.deleteOne({title:"miranda"}).then(msg=>console.log(msg))
Movie.remove({title:"miranda"}).then(msg=>console.log(msg))
Movie.findOneAndUpdate({title:"miranda"},{score:7.8},{new:true}).then(res=>console.log(res))
Movie.updateMany({title:{$in:["Amadeus","Arjun"]}},{score:9.9}).then(res=>console.log(res))
Movie.updateOne({title:"Arjun"},{year:1998}).then(res=>console.log(res))
db.movies.updateOne({title:"Arjun"},{year:1998})
Movie.find({}).then(data=> console.log(data))
Movie.find({})
                            //     console.log(data)
                            //     console.log("It Worked")
                            // .then(data=>{
                            // {title:"Avengers", year:2008,score:9.2,rating:"A"}])
                            // {title:"miranda", year:2000,score:8.9,rating:"U/A"},
                            // {title:"Arjun", year:1996,score:9.1,rating:"U"},
                            // Movie.insertMany([{title:"Amadeus", year:1986,score:9.2,rating:"R"},
                            // amadeus.save()
                            //const amadeus=new Movie({title:"Amadeus", year:1986,score:9.2,rating:"R"});
                            const Movie=mongoose.model("Movie",movieSchema);
                            });
                            rating:String
                        score:Number,
                    year:Number,
                title:String,
            const movieSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/movieApp')
const mongoose=require("mongoose");
.load index.js
Movie
node index.js
amadeus.save()
amadeus.score=9.4
amadeus.save()
amadeus
                            db.movies.insertMany([{title:"amadeus"}])
                            const amadeus=new Movie({title:"Amadeus", year:1986,score:9.2,rating:"R"});
                            const Movie=mongoose.model("Movie",movieSchema);
                            });
                            rating:String
                        score:Number,
                    year:Number,
                title:String,
            const movieSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/movieApp')
const mongoose=require("mongoose");
.load index.js
amadeus
                            const Movie=mongoose.model("Movie",movieSchema);
                            });
                            rating:String
                        score:Number,
                    year:Number,
                title:String,
            const movieSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/movieApp')
const mongoose=require("mongoose");
.load index.js
amadeus
                            const Movie=mongoose.model("Movie",movieSchema);
                            });
                            rating:String
                        score:Number,
                    year:Number,
                title:String,
            const movieSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/movieApp')
const mongoose=require("mongoose");
.load index.js
amadeus
                            const Movie=mongoose.model("Movie",movieSchema);
                            });
                            rating:String
                        score:Number,
                    year:Number,
                title:String,
            const movieSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/movieApp')
const mongoose=require("mongoose");
.load index.js
.Load index.js
.Load indedx.js
amadeus
                            const Movie=mongoose.model("Movie",movieSchema);
                            });
                            rating:String
                        score:Number,
                    year:Number,
                title:String,
            const movieSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/movieApp')
const mongoose=require("mongoose");
.load index.js
amadeus
                            const Movie=mongoose.model("movie",movieSchema);
                            });
                            rating:String
                        score:Number,
                    year:Number,
                title:String,
            const movieSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/movieApp')
const mongoose=require("mongoose");
.load index.js
amadeus
amadues
                            const Movie=mongoose.model("movie",movieSchema);
                            });
                            rating:String
                        score:Number,
                    year:Number,
                title:String,
            const movieSchema=new mongoose.Schema({
            })
            console.log(err)
        console.log("Oh No error!!!!")
    }).catch(err=>{
    console.log("Connection Open!!!");
.then(()=>{
mongoose.connect('mongodb://127.0.0.1:27017/movieApp')
const mongoose=require("mongoose");
.load index.js
node -i -e "$(< index.js)
.exit
exit
app.js
node app.js
.exit
process.argv
process.cwd()
process.release
process.version
.exit
setTimeout(()=> console.log("Hello"),3000)
global
"Heloo"+"World"
Hello
"hello"+World
1+3
.exit
ls
asdas